package drone  --LB: regarding 'connections', inform if it is immediate (->) or delayed (->>)
public
	with Buses::Ethernet;
	with Processors::ARM;
	with Buses::PWM;
	with Processor_Properties;

	device Battery
		features
			chargeLevel: out data port;
		properties
			Dispatch_Protocol => Periodic;
			Period => 1 sec;
	end Battery;

	device Camera
		features
			image: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
		flows
			imageFlow: flow source image {Latency => 0ns .. 16666ns;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 16666ns;
	end Camera;

	device Temperature
		features
			temp: out data port;
		properties
			Dispatch_Protocol => Periodic;
			Period => 1 sec;
	end Temperature;

	process FlightController
		features
			nextDirection: in data port;
			speed_1: out data port;
			speed_2: out data port;
			speed_3: out data port;
			speed_4: out data port;
		flows
			usedir_1: flow path nextDirection -> speed_1;
			usedir_2: flow path nextDirection -> speed_2;
			usedir_3: flow path nextDirection -> speed_3;
			usedir_4: flow path nextDirection -> speed_4;
	end FlightController;

	process implementation FlightController.impl
		subcomponents
			fc: thread FlightController_th;
		connections
			c1: port nextDirection -> fc.nextDirection; -- {Latency => 1ms .. 2ms;};
			c2: port fc.speed_1 -> speed_1; --  {Latency => 1ms .. 10ms;};
			c3: port fc.speed_2 -> speed_2; --  {Latency => 1ms .. 10ms;};
			c4: port fc.speed_3 -> speed_3; --  {Latency => 1ms .. 10ms;};
			c5: port fc.speed_4 -> speed_4; --  {Latency => 1ms .. 10ms;};
--		flows
--			usedir_1: flow path nextDirection -> c1 -> fc.usedir_1; --LB: not sure what to do here
	end FlightController.impl;

	--2do: add thermostat device + 2 processors + communication bus (consider ports) + mapping from threads to processor.
	thread FlightController_th
		features
			nextDirection: in data port;
			speed_1: out data port;
			speed_2: out data port;
			speed_3: out data port;
			speed_4: out data port;
		flows
			usedir_1: flow path nextDirection -> speed_1 {Latency => 1ms .. 10ms;};
			usedir_2: flow path nextDirection -> speed_2 {Latency => 1ms .. 10ms;};
			usedir_3: flow path nextDirection -> speed_3 {Latency => 1ms .. 10ms;};
			usedir_4: flow path nextDirection -> speed_4 {Latency => 1ms .. 10ms;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 100ms .. 250ms; --LB: double check
	end FlightController_th;

	thread ImageProcessing
		features
			image: in data port;
			color: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
		flows
			im2col: flow path image -> color {Latency => 500ms .. 1 sec;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 1 sec;
			Compute_Execution_Time => 200ms .. 400ms;
	end ImageProcessing;

	process ROS
		features
			batIn: in event data port;

			tempIn: in event data port;
			ImgIn: in event data port;

			batOut: out event data port;

			tempOut: out event data port;
			colorOut: out event data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
			dirIn: in event data port;
			dirOut: out event data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
		flows
			img2col: flow path ImgIn -> colorOut;
			dirInOut: flow path dirIn -> dirOut;
			flow_bat: flow path batIn -> batOut;
			flow_temp: flow path tempIn -> tempOut;
	end ROS;

	process implementation ROS.impl
		subcomponents
			imgpr: thread ImageProcessing;
			pubDir: thread Publish;
		connections
			c1: port ImgIn -> imgpr.image {Latency => 10ms .. 20ms;};
			c2: port imgpr.color -> colorOut {Latency => 1ms .. 2ms;};
			c3: port dirIn -> pubDir.i {Latency => 1ms .. 2ms;};
			c4: port pubDir.o -> dirOut {Latency => 1ms .. 2ms;};
		flows
			img2col: flow path imgIn -> c1 -> imgpr.im2col -> c2 -> colorOut;
			dirInOut: flow path dirIn -> c3 -> pubDir.i2o -> c4 -> dirOut;
	end ROS.impl;

	thread Publish
		features
			o: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
			i: in event data port {Queue_Size => 10; Queue_Processing_Protocol => FIFO;};
		flows
			i2o: flow path i -> o {Latency => 2ms .. 5ms;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 5ms;
			Compute_Execution_Time => 1ms .. 2ms;
	end Publish;

	thread ControlSW
		features
			color: in data port;
			dir: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
			temp: in data port;
			bat: in data port;
		flows
			col2dir: flow path color -> dir {Latency => 5ms .. 10ms;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 10ms;
			Compute_Execution_Time => 2ms .. 4ms;
	end ControlSW;

	system Drone
	end Drone;

	system implementation Drone.impl
		subcomponents
			nucleo: processor Nucleof767zi;
			jetson: processor JetsonTX2;
			--Processes:
			droneProcess: process DroneProcess.impl;
			ros: process ROS.impl;
			fctrl: process FlightController.impl; --FlightController_th;
			--Devices:
			cam: device Camera;
			bat: device Battery;
			temp: device Temperature;
			esc1: device ESC;
			esc2: device ESC;
			esc3: device ESC;
			esc4: device ESC;
			ethernet: bus Buses::Ethernet::Ethernet.impl;
			pwm: bus Buses::PWM::PWM.impl;

			fltct: process FlightController.impl;
		connections
			c2: port temp.temp -> ros.tempIn; --also involve bus, so must be modeled the binding
			c3: port cam.image -> ros.ImgIn {Latency => 10ms .. 20ms;};
			c0: port bat.chargeLevel -> ros.batIn;
			--LB: check if it is all connected
			c4: port ros.batOut -> droneProcess.bat;
			c5: port ros.colorOut -> droneProcess.color {Latency => 1ms .. 2ms;};
			c6: port ros.tempOut -> droneProcess.temp; -- LB: make the binding as well
			c7: port droneProcess.dir -> ros.dirIn {Latency => 1ms .. 2ms;};
			c8: port ros.dirOut -> fltct.nextDirection {Latency => 1ms .. 2ms;};
			c9_p: port fltct.speed_1 -> esc1.speed; --LB: 2do (Actual_Connector_Binding => c9_b); connect the logical to physical link	
			c10_p: port fltct.speed_2 -> esc2.speed;
			c11_p: port fltct.speed_3 -> esc3.speed;
			c12_p: port fltct.speed_4 -> esc4.speed;

			c9_b: bus access nucleo.pwm_bus -> pwm;
			c10_b: bus access nucleo.pwm_bus -> pwm;
			c11_b: bus access nucleo.pwm_bus -> pwm;
			c12_b: bus access nucleo.pwm_bus -> pwm;
		--need a flow inside ros to go outside ros
		flows
			img2dir1: end to end flow  cam.imageFlow -> c3 -> ros.img2col -> c5 -> droneProcess.col2dir -> c7 -> ros.dirInOut -> c8 -> fltct.usedir_1 -> c9_p -> esc1.speedFlow; --misses the link between port and flow; implement the component 
--			img2dir2: end to end flow  cam.imageFlow -> c3 -> ros.img2col -> c5 -> droneProcess.col2dir -> c7 -> ros.dirInOut -> c8 -> fltct.usedir_2 -> c10_p -> esc2.speedFlow;
--			img2dir3: end to end flow  cam.imageFlow -> c3 -> ros.img2col -> c5 -> droneProcess.col2dir -> c7 -> ros.dirInOut -> c8 -> fltct.usedir_3 -> c11_p -> esc3.speedFlow;
--			img2dir4: end to end flow  cam.imageFlow -> c3 -> ros.img2col -> c5 -> droneProcess.col2dir -> c7 -> ros.dirInOut -> c8 -> fltct.usedir_4 -> c12_p -> esc4.speedFlow;
		--LB: add a new flow for each ESC?
		properties
--			Latency => 1 sec .. 1 sec applies to img2dir1,img2dir2,img2dir3,img2dir4;  --img2dir;
			Actual_Processor_Binding => (reference (nucleo)) applies to droneProcess;
			Actual_Processor_Binding => (reference (nucleo)) applies to fctrl;
			Actual_Processor_Binding => (reference (jetson)) applies to ros;
	end Drone.impl;

	process DroneProcess
		features
			bat: in data port;
			color: in data port;
			temp: in data port;
			dir: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
		flows
			col2dir: flow path color -> dir;
	end DroneProcess;

	process implementation DroneProcess.impl
		subcomponents
			sw: thread ControlSW;
		connections
			DroneProcess_impl_new_connection: feature bat -> sw.bat;
			DroneProcess_impl_new_connection2: feature color -> sw.color {Latency => 1ms .. 2ms;};
			DroneProcess_impl_new_connection3: feature temp -> sw.temp;
			DroneProcess_impl_new_connection4: feature sw.dir -> dir {Latency => 1ms .. 2ms;};
		flows
			col2dir: flow path color -> DroneProcess_impl_new_connection2 -> sw.col2dir -> DroneProcess_impl_new_connection4 -> dir;
	end DroneProcess.impl;

	processor Nucleof767zi extends Processors::ARM::Generic_ARM
		features
			eth_bus: requires bus access Buses::Ethernet::Ethernet.IMPL;
			pwm_bus: requires bus access Buses::PWM::PWM.impl;
		properties
			Processor_Properties::Processor_Frequency => 168 Mhz;
			Scheduling_Protocol => (POSIX_1003_HIGHEST_PRIORITY_FIRST_PROTOCOL);
	end Nucleof767zi;

	processor JetsonTX2 extends Processors::ARM::Generic_ARM
		features
			eth_bus: requires bus access Buses::Ethernet::Ethernet.IMPL;
		properties
			Processor_Properties::Processor_Frequency => 168 Mhz;
			Scheduling_Protocol => (POSIX_1003_HIGHEST_PRIORITY_FIRST_PROTOCOL);
	end JetsonTX2;

	device ESC
		features
			speed: in data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
			pwm_bus: requires bus access Buses::PWM::PWM.impl;
		flows
			speedFlow: flow sink speed {Latency => 0ns .. 16666ns;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 10ms;
	end ESC;

--	device implementation ESC.impl
--		flows
--			speedFlow: flow sink speed 
--	end ESC.impl;

end drone;