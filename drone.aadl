-- Sample line
package drone  --LB: regarding 'connections', inform if it is immediate (->) or delayed (->>)
public
	with Buses::Ethernet;
	with Processors::ARM;
--	with Buses::PWM;
	with Processor_Properties;

	device Thermostat
		features
			highTemp: out data port;
		flows
			highTempFlow: flow source highTemp {Latency => 100ns .. 1000ns;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ns;
	end Thermostat;

	device ThermalCamera
		features
			image: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
		flows
			imageFlow: flow source image {Latency => 25ms .. 50ms;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 50ms;
	end ThermalCamera;

	device TempSensor
		features
			temp: out data port;
		flows
			tempFlow: flow source temp {Latency => 200ms .. 1000ms;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
	end TempSensor;

	thread ImageProcessing
		features
			image: in data port;
			color: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
		flows
			im2col: flow path image -> color {Latency => 500ms .. 1 sec;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 1 sec;
			Compute_Execution_Time => 200ms .. 400ms;
	end ImageProcessing;

	process ROS
		features
			htIn: in event data port;
			tempIn: in event data port;
			imgIn: in event data port;

			htOut: out event data port;
			tempOut: out event data port;
			colorOut: out event data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
			
			dirIn: in event data port;
			dirOut: out event data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
		flows
			img2colflw: flow path imgIn -> colorOut;
			dirInOutflw: flow path dirIn -> dirOut;
			hightempflw: flow path htIn -> htOut;
			tempflw: flow path tempIn -> tempOut;
	end ROS;

	process implementation ROS.impl
		subcomponents
			imgpr: thread ImageProcessing;
			pubDir: thread Publish;
		connections
			c1: port imgIn -> imgpr.image {Latency => 10ms .. 20ms;};
			c2: port imgpr.color -> colorOut {Latency => 1ms .. 2ms;};
			c3: port dirIn -> pubDir.i {Latency => 1ms .. 2ms;};
			c4: port pubDir.o -> dirOut {Latency => 1ms .. 2ms;};
		flows
			img2colflw: flow path imgIn -> c1 -> imgpr.im2col -> c2 -> colorOut;
			dirInOutflw: flow path dirIn -> c3 -> pubDir.i2o -> c4 -> dirOut;
	end ROS.impl;

	thread Publish
		features
			o: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
			i: in event data port {Queue_Size => 10; Queue_Processing_Protocol => FIFO;};
		flows
			i2o: flow path i -> o {Latency => 2ms .. 5ms;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 5ms;
			Compute_Execution_Time => 1ms .. 2ms;
	end Publish;

	thread ControlSW
		features
			color: in data port;
			temp: in data port;
			high_temp: in data port;
			dir: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
		flows
			col2dirflw: flow path color -> dir {Latency => 5ms .. 10ms;};
			temp2dirflw: flow path temp -> dir {Latency => 5ms .. 10ms;};
			hight2dirflw: flow path high_temp -> dir {Latency => 5ms .. 10ms;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 10ms;
			Compute_Execution_Time => 2ms .. 4ms;
	end ControlSW;

	system Drone
	end Drone;

	system implementation Drone.impl
		subcomponents
			--Processors
			jetson: processor JetsonTX2;
			
			--Busses
			ethernet: bus Buses::Ethernet::Ethernet.impl;

			--Processes:
			droneProcess: process DroneProcess.impl;
			ros: process ROS.impl;

			--Devices
			cam: device ThermalCamera;
			therm: device Thermostat;
			tsensor: device TempSensor;
			fsys: device Flight_System;
			
		connections
			c1: port therm.highTemp -> ros.htIn;
			c2: port tsensor.temp -> ros.tempIn; 
			c3: port cam.image -> ros.imgIn {Latency => 10ms .. 20ms;};
			c4: port ros.htOut -> droneProcess.high_temp;
			c5: port ros.colorOut -> droneProcess.color {Latency => 1ms .. 2ms;};
			c6: port ros.tempOut -> droneProcess.temp {Latency => 1ms .. 2ms;};
			c7: port droneProcess.dir -> ros.dirIn {Latency => 1ms .. 2ms;};
			c8: port ros.dirOut -> fsys.nextDirection {Latency => 1ms .. 2ms;};
		flows
			img2dir_flw: end to end flow  cam.imageFlow -> c3 -> ros.img2colflw -> c5 -> droneProcess.col2dirflw -> c7 -> ros.dirInOutflw -> c8 -> fsys.ndf { Latency => 10ms .. 500ms; }; -- Expected end-to-end latency
			temp2dir_flw: end to end flow tsensor.tempFlow -> c2 -> ros.tempflw -> c6 -> droneProcess.temp2dirflw -> c7 -> ros.dirInOutflw -> c8 -> fsys.ndf { Latency => 10ms .. 500ms; }; -- Expected end-to-end latency
			highTemp2dir_flw: end to end flow therm.highTempFlow -> c1 -> ros.hightempflw -> c4 -> droneProcess.therm2dirflw -> c7 -> ros.dirInOutflw -> c8 -> fsys.ndf { Latency => 10ms .. 500ms; }; -- Expected end-to-end latency
		properties
			Actual_Processor_Binding => (reference (jetson)) applies to droneProcess;
			Actual_Processor_Binding => (reference (jetson)) applies to ros;
	end Drone.impl;

	process DroneProcess
		features
			high_temp: in data port;
			color: in data port;
			temp: in data port;
			dir: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
		flows
			col2dirflw: flow path color -> dir;
			temp2dirflw: flow path temp -> dir;
			therm2dirflw: flow path high_temp -> dir;
	end DroneProcess;

	process implementation DroneProcess.impl
		subcomponents
			sw: thread ControlSW;
		connections
			dpic1: feature high_temp -> sw.high_temp;
			dpic2: feature color -> sw.color {Latency => 1ms .. 2ms;};
			dpic3: feature temp -> sw.temp;
			dpic4: feature sw.dir -> dir {Latency => 1ms .. 2ms;};
		flows
			col2dirflw: flow path color -> dpic2 -> sw.col2dirflw -> dpic4 -> dir;
			temp2dirflw: flow path temp -> dpic3 -> sw.temp2dirflw -> dpic4 -> dir;
			therm2dirflw: flow path high_temp -> dpic1 -> sw.hight2dirflw -> dpic4 -> dir;
			
	end DroneProcess.impl;

--	processor Nucleof767zi extends Processors::ARM::Generic_ARM
--		features
--			eth_bus: requires bus access Buses::Ethernet::Ethernet.IMPL;
--			pwm_bus: requires bus access Buses::PWM::PWM.impl;
--		properties
--			Processor_Properties::Processor_Frequency => 168 Mhz;
--			Scheduling_Protocol => (POSIX_1003_HIGHEST_PRIORITY_FIRST_PROTOCOL);
--	end Nucleof767zi;

	processor JetsonTX2 extends Processors::ARM::Generic_ARM
		features
			eth_bus: requires bus access Buses::Ethernet::Ethernet.IMPL;
		properties
			Processor_Properties::Processor_Frequency => 168 Mhz;
			Scheduling_Protocol => (POSIX_1003_HIGHEST_PRIORITY_FIRST_PROTOCOL);
	end JetsonTX2;

	device Flight_System
		features
			nextDirection: in data port {Input_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);}; --2do: check the timing info 
		flows
			ndf: flow sink nextDirection {Latency => 15ms .. 50ms;}; --2do: revise timing values
		properties
			Dispatch_Protocol => Periodic;
			Period => 100ms;
	end Flight_System;

--	device implementation Flight_System.impl
--		flows
--			ndf: flow sink nextDirection 
--	end Flight_System.impl;

end drone;
