-- Sample line
package drone  --LB: regarding 'connections', inform if it is immediate (->) or delayed (->>)
public
	with Buses::Ethernet;
	with Processors::ARM;
--	with Buses::PWM;
	with Processor_Properties;

	processor JetsonTX2 extends Processors::ARM::Generic_ARM
		features
			eth_bus: requires bus access Buses::Ethernet::Ethernet.IMPL;
		properties
			Processor_Properties::Processor_Frequency => 168 Mhz;
			Scheduling_Protocol => (POSIX_1003_HIGHEST_PRIORITY_FIRST_PROTOCOL);
	end JetsonTX2;

	device Flight_System
		features
			nextDirection: in data port {Input_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);}; --2do: check the timing info 
		flows
			ndf: flow sink nextDirection {Latency => 15ms .. 50ms;}; --2do: revise timing values
		properties
			Dispatch_Protocol => Periodic;
			Period => 100ms;
	end Flight_System;


	-- A thermal camera outputs a visual image that shows temperature variations in an area. 
	-- This image is created by converting infrared radiation emitted by objects into visible light.
	-- The image created have a dimension of N x M pixels and a sample rate from 20 FPS to 40 FPS.
	device ThermalCamera
		features
			image: out data port;
			-- It is important to put the "Output_Time" parameter?
			--image: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
		flows
			imageGenerationFlow: flow source image {Latency => 25ms .. 50ms;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 50ms;
	end ThermalCamera;

	thread ThermalImageProcessing
		features
			image: in data port;  -- Image read from I2C interface.
			color: out data port; -- A integer number representing the predominant color in the image. 
			--color: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
		flows
			im2col: flow path image -> color {Latency => 500ms .. 1 sec;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 1 sec;
			Compute_Execution_Time => 200ms .. 400ms;
	end ThermalImageProcessing;

	process ThermalImageProcessingProc
		features
			image: in data port;  -- Image read from I2C interface.
			color: out data port; -- A integer number representing the predominant color in the image. 
			--color: out data port {Output_Time => ([Time => Deadline; Offset => 0ms .. 0ms;]);};
		flows
			im2col: flow path image -> color;
	end ThermalImageProcessingProc;

	process implementation ThermalImageProcessingProc.impl
		subcomponents
			ThermalImageProcessingThread: thread ThermalImageProcessing;
		connections
			c1: port image -> ThermalImageProcessingThread.image;
			c2: port ThermalImageProcessingThread.color -> color;
		flows
			im2col: flow path image -> c1 -> ThermalImageProcessingThread.im2col -> c2 -> color {Latency => 500ms .. 1 sec;};
	end ThermalImageProcessingProc.impl;


	-- Thermostat is a device that output a boolean flag indicates temperature goes high than a pre-defined threshold.
	-- It has a high sample time compared to other solutions.
	device Thermostat
		features
			highTempFlag: out event port; -- output flag indicating that threshold temperature was reached.
		flows
			highTempMeasureFlow: flow source highTempFlag {Latency => 100ns .. 1000ns;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ns;
	end Thermostat;

	-- The temperature sensor (different from the thermostat) generates an 
	-- analog output signal proportional to the measured temperature. 
	device TempSensor
		features
			temp: out data port;
		flows
			tempMeasureFlow: flow source temp {Latency => 200ms .. 1000ms;};
		properties
			-- Pq colocar dispatch protocol, se já definimos uma latencia? Se colocamos o periodo como 1000 ms, as latencias mínimas serão ignoradas.
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
	end TempSensor;
	
	thread TemperatureSensorAcquiring
		features
			temp_in: in data port; -- Temperature sensor read from I2C interface.
			temp_out: out data port; -- Temperature sensor published in ROS topic.
		flows
			temp2ros: flow path temp_in -> temp_out {Latency => 100 us .. 200 us;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 200 ms; -- Period is equal to the minimum sample time of the sensor.
			Compute_Execution_Time => 100 us .. 200 us;
	end TemperatureSensorAcquiring;

	thread ThermostateAcquiring
		features
			highTempFlag_in: in event port; -- thermostate flag read from IRQ interface.
			highTempFlag_out: out event port; -- thermostate published in ROS topic.
		flows
			tempFlag2ros: flow path highTempFlag_in -> highTempFlag_out {Latency => 100 us .. 200 us;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 1 ms; -- Although sensor speed is about 100 ns to 1000 ns, this will overload CPU. 1 ms is suficient for response time.
			Compute_Execution_Time => 100 us .. 200 us;
	end ThermostateAcquiring;
	
	thread ActuatorSpeedCtrl
		features
			highTempFlag_in: in event port; -- thermostate flag read from shared memory.
			temp_in: in data port; -- Temperature sensor read from shared memory.
			thermalImageColor: in event data port {Queue_Size => 10; Queue_Processing_Protocol => FIFO;}; -- A integer number representing the predominant color in the image, read from ROS topic.
			actuatorsSpeed: out data port; -- Drone actuator speeds sent to flight controller via UART interface.
		flows
			tempFlag2ros: flow path highTempFlag_in -> actuatorsSpeed {Latency => 100 us .. 200 us;};
			tempValue2ros: flow path temp_in -> actuatorsSpeed {Latency => 100 us .. 200 us;};
			ImgColor2ros: flow path thermalImageColor -> actuatorsSpeed {Latency => 100 us .. 200 us;};
		properties
			Dispatch_Protocol => Periodic;
			Period => 1 ms; -- Although sensor speed is about 100 ns to 1000 ns, this will overload CPU. 1 ms is suficient for response time.
			Compute_Execution_Time => 100 us .. 200 us;
	end ActuatorSpeedCtrl;

	process KinematicsCtrl
		features
			thermalImageColor: in event data port; -- A integer number representing the predominant color in the image, read from ROS topic.
			temp_in: in data port; -- Temperature sensor read from I2C interface.
			temp_out: out data port; -- Temperature sensor published in ROS topic.
			highTempFlag_in: in event port; -- thermostate flag read from IRQ interface.
			highTempFlag_out: out event port; -- thermostate published in ROS topic.
			actuatorsSpeed: out data port; -- Drone actuator speeds sent to flight controller via UART interface.
		--flows
			--im2col: flow path image -> color;
	end KinematicsCtrl;

	process implementation KinematicsCtrl.impl
		subcomponents
			TempSensorAcquiringThread: thread TemperatureSensorAcquiring;
			ThermostateAcquiringThread: thread ThermostateAcquiring;
			ActuatorSpeedCtrlThread: thread ActuatorSpeedCtrl;
		connections
			c1: port temp_in -> TempSensorAcquiringThread.temp_in;
			c2: port TempSensorAcquiringThread.temp_out -> temp_out;
			c3: port highTempFlag_in -> ThermostateAcquiringThread.highTempFlag_in;
			c4: port ThermostateAcquiringThread.highTempFlag_out -> highTempFlag_out;
			c5: port TempSensorAcquiringThread.temp_out -> ActuatorSpeedCtrlThread.temp_in;
			c6: port ThermostateAcquiringThread.highTempFlag_out -> ActuatorSpeedCtrlThread.highTempFlag_in;
			c7: port ActuatorSpeedCtrlThread.actuatorsSpeed -> actuatorsSpeed;
			c8: port thermalImageColor -> ActuatorSpeedCtrlThread.thermalImageColor;
		--flows
		--	im2col: flow path image -> c1 -> ThermalImageProcessingThread.im2col -> c2 -> color {Latency => 500ms .. 1 sec;};
	end KinematicsCtrl.impl;

	system Drone
	end Drone;

	system implementation Drone.impl
		subcomponents
			--Processors
			jetson: processor JetsonTX2;
			
			--Busses
			ethernet: bus Buses::Ethernet::Ethernet.impl;

			--Processes:
			kinematics_ctrl: process KinematicsCtrl.impl;
			thermal_image_process: process ThermalImageProcessingProc.impl;

			--Devices
			cam: device ThermalCamera;
			therm: device Thermostat;
			tsensor: device TempSensor;
			fsys: device Flight_System;
			
		connections
			c1: port therm.highTempFlag -> kinematics_ctrl.highTempFlag_in;
			c2: port tsensor.temp -> kinematics_ctrl.temp_in; 
			c3: port cam.image -> thermal_image_process.image {Latency => 10ms .. 20ms;};
			c4: port thermal_image_process.color -> kinematics_ctrl.thermalImageColor {Latency => 10ms .. 20ms;};
			c5: port kinematics_ctrl.actuatorsSpeed -> fsys.nextDirection;
--		flows
--			img2dir_flw: end to end flow  cam.imageGenerationFlow -> c3 -> ros.img2colflw -> c5 -> droneProcess.col2dirflw -> c7 -> ros.dirInOutflw -> c8 -> fsys.ndf { Latency => 10ms .. 500ms; }; -- Expected end-to-end latency
--			temp2dir_flw: end to end flow tsensor.tempMeasureFlow -> c2 -> ros.tempflw -> c6 -> droneProcess.temp2dirflw -> c7 -> ros.dirInOutflw -> c8 -> fsys.ndf { Latency => 10ms .. 500ms; }; -- Expected end-to-end latency
--			highTemp2dir_flw: end to end flow therm.highTempFlow -> c1 -> ros.hightempflw -> c4 -> droneProcess.therm2dirflw -> c7 -> ros.dirInOutflw -> c8 -> fsys.ndf { Latency => 10ms .. 500ms; }; -- Expected end-to-end latency
		properties
			Actual_Processor_Binding => (reference (jetson)) applies to kinematics_ctrl;
			Actual_Processor_Binding => (reference (jetson)) applies to thermal_image_process;
	end Drone.impl;



--	device implementation Flight_System.impl
--		flows
--			ndf: flow sink nextDirection 
--	end Flight_System.impl;

end drone;
